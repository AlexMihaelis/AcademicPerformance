{
  "api/AcademicPerformance.Controllers.PerfomanceController.html": {
    "href": "api/AcademicPerformance.Controllers.PerfomanceController.html",
    "title": "Class PerfomanceController | AcadmicPerfomance",
    "keywords": "Class PerfomanceController Namespace AcademicPerformance.Controllers Assembly AcademicPerformance.dll public class PerfomanceController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller PerfomanceController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerfomanceController(ILogger<PerfomanceController>, AcademicPerformanceDBContext) public PerfomanceController(ILogger<PerfomanceController> logger, AcademicPerformanceDBContext dBContext) Parameters logger ILogger<PerfomanceController> dBContext AcademicPerformanceDBContext Methods Error() [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult Filter(FilterPerfomanceViewModel) Фильтр успеваемости Этот метод делает выборку успеваемости за текущую неделю [HttpPost(\"Index\")] public IActionResult Filter(FilterPerfomanceViewModel filter) Parameters filter FilterPerfomanceViewModel Параметры, которые содержат идентификатор группы и идентификатор дисциплины Returns IActionResult \"ВьюМодель\", которая содержит справочники, выбранную дисциплину и группу, а также сведения об успеваемости Index() Страница успеваемости [HttpGet] public IActionResult Index() Returns IActionResult Возвращает страницу успеваемости с объектом, в котором содержатся справочники дисциплин и групп Privacy() public IActionResult Privacy() Returns IActionResult SavePerfomance(List<Grade>) Сохранение ведомости [HttpPost(\"Save\")] public IActionResult SavePerfomance(List<Grade> grades) Parameters grades List<Grade> Коллекция, которая содержит оценки Returns IActionResult Статус запроса"
  },
  "api/AcademicPerformance.Controllers.html": {
    "href": "api/AcademicPerformance.Controllers.html",
    "title": "Namespace AcademicPerformance.Controllers | AcadmicPerfomance",
    "keywords": "Namespace AcademicPerformance.Controllers Classes PerfomanceController"
  },
  "api/AcademicPerformance.EntityFraamewordCore.AcademicPerformanceDBContext.html": {
    "href": "api/AcademicPerformance.EntityFraamewordCore.AcademicPerformanceDBContext.html",
    "title": "Class AcademicPerformanceDBContext | AcadmicPerfomance",
    "keywords": "Class AcademicPerformanceDBContext Namespace AcademicPerformance.EntityFraamewordCore Assembly AcademicPerformance.dll Класс для регистрации контекста базы данных public class AcademicPerformanceDBContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext AcademicPerformanceDBContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Disciplines Коллекция дисциплин для работы с базой данных public DbSet<Discipline> Disciplines { get; set; } Property Value DbSet<Discipline> Faculties Коллекция факультетов для работы с базой данных public DbSet<Faculty> Faculties { get; set; } Property Value DbSet<Faculty> Grades Коллекция оценок для работы с базой данных public DbSet<Grade> Grades { get; set; } Property Value DbSet<Grade> Groups Коллекция групп для работы с базой данных public DbSet<Group> Groups { get; set; } Property Value DbSet<Group> Students Коллекция студентов для работы с базой данных public DbSet<Student> Students { get; set; } Property Value DbSet<Student> Methods OnConfiguring(DbContextOptionsBuilder) Метод для конфигурирования базы данных protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder Опции, с помощью которых можно конфигурировать подключение к базе данных"
  },
  "api/AcademicPerformance.EntityFraamewordCore.html": {
    "href": "api/AcademicPerformance.EntityFraamewordCore.html",
    "title": "Namespace AcademicPerformance.EntityFraamewordCore | AcadmicPerfomance",
    "keywords": "Namespace AcademicPerformance.EntityFraamewordCore Classes AcademicPerformanceDBContext Класс для регистрации контекста базы данных"
  },
  "api/AcademicPerformance.Models.DTO.Discipline.html": {
    "href": "api/AcademicPerformance.Models.DTO.Discipline.html",
    "title": "Class Discipline | AcadmicPerfomance",
    "keywords": "Class Discipline Namespace AcademicPerformance.Models.DTO Assembly AcademicPerformance.dll Модель дисциплины public class Discipline Inheritance object Discipline Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisciplineId Идентификатор дисципоины [Key] public int DisciplineId { get; set; } Property Value int Name Наименование дисциплины public string Name { get; set; } Property Value string"
  },
  "api/AcademicPerformance.Models.DTO.ErrorViewModel.html": {
    "href": "api/AcademicPerformance.Models.DTO.ErrorViewModel.html",
    "title": "Class ErrorViewModel | AcadmicPerfomance",
    "keywords": "Class ErrorViewModel Namespace AcademicPerformance.Models.DTO Assembly AcademicPerformance.dll public class ErrorViewModel Inheritance object ErrorViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RequestId public string? RequestId { get; set; } Property Value string ShowRequestId public bool ShowRequestId { get; } Property Value bool"
  },
  "api/AcademicPerformance.Models.DTO.Faculty.html": {
    "href": "api/AcademicPerformance.Models.DTO.Faculty.html",
    "title": "Class Faculty | AcadmicPerfomance",
    "keywords": "Class Faculty Namespace AcademicPerformance.Models.DTO Assembly AcademicPerformance.dll Модель факультета public class Faculty Inheritance object Faculty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FacultyId Идентификатор факультета [Key] public int FacultyId { get; set; } Property Value int Name Наименование дисциплины public string Name { get; set; } Property Value string"
  },
  "api/AcademicPerformance.Models.DTO.Grade.html": {
    "href": "api/AcademicPerformance.Models.DTO.Grade.html",
    "title": "Class Grade | AcadmicPerfomance",
    "keywords": "Class Grade Namespace AcademicPerformance.Models.DTO Assembly AcademicPerformance.dll Модель оценки public class Grade Inheritance object Grade Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date Дата выставления оценки public DateTime Date { get; set; } Property Value DateTime DisciplineId Идентификатор дисциплины public int DisciplineId { get; set; } Property Value int GradeId Идентификатор оценки [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public int GradeId { get; set; } Property Value int Student Навигационное свойство \"Студент\" public Student Student { get; set; } Property Value Student StudentId Идентификатор студентов public int StudentId { get; set; } Property Value int Value значение public string? Value { get; set; } Property Value string"
  },
  "api/AcademicPerformance.Models.DTO.Group.html": {
    "href": "api/AcademicPerformance.Models.DTO.Group.html",
    "title": "Class Group | AcadmicPerfomance",
    "keywords": "Class Group Namespace AcademicPerformance.Models.DTO Assembly AcademicPerformance.dll [Table(\"Groups\")] public class Group Inheritance object Group Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FacultyId public int FacultyId { get; set; } Property Value int GroupId Идентификатор группы [Key] public int GroupId { get; set; } Property Value int Name Наименование группы public string Name { get; set; } Property Value string"
  },
  "api/AcademicPerformance.Models.DTO.Student.html": {
    "href": "api/AcademicPerformance.Models.DTO.Student.html",
    "title": "Class Student | AcadmicPerfomance",
    "keywords": "Class Student Namespace AcademicPerformance.Models.DTO Assembly AcademicPerformance.dll Модель студента public class Student Inheritance object Student Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Birthday Дата рождения студента public DateTime Birthday { get; set; } Property Value DateTime FullName Полное имя студента public string FullName { get; set; } Property Value string Grades Коллекция оценок public HashSet<Grade> Grades { get; set; } Property Value HashSet<Grade> GroupId Идентификатор группы public int GroupId { get; set; } Property Value int NumGradeBook Номер зачетной книжки студента public int NumGradeBook { get; set; } Property Value int StudentId Идентификатор студента [Key] public int StudentId { get; set; } Property Value int"
  },
  "api/AcademicPerformance.Models.DTO.html": {
    "href": "api/AcademicPerformance.Models.DTO.html",
    "title": "Namespace AcademicPerformance.Models.DTO | AcadmicPerfomance",
    "keywords": "Namespace AcademicPerformance.Models.DTO Classes Discipline Модель дисциплины ErrorViewModel Faculty Модель факультета Grade Модель оценки Group Student Модель студента"
  },
  "api/AcademicPerformance.Models.ViewModels.FilterPerfomanceViewModel.html": {
    "href": "api/AcademicPerformance.Models.ViewModels.FilterPerfomanceViewModel.html",
    "title": "Class FilterPerfomanceViewModel | AcadmicPerfomance",
    "keywords": "Class FilterPerfomanceViewModel Namespace AcademicPerformance.Models.ViewModels Assembly AcademicPerformance.dll Модель представления, содержащая информацию о фильтрах по дисциплине и группе, а также содержащая ведомость по группе public class FilterPerfomanceViewModel Inheritance object FilterPerfomanceViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Disciplines Коллекция дисциплин public IEnumerable<Discipline> Disciplines { get; set; } Property Value IEnumerable<Discipline> Groups Коллекция групп public IEnumerable<Group> Groups { get; set; } Property Value IEnumerable<Group> Perfomance Коллекция ведомостей в разрезе студента public IEnumerable<PerfomanceViewModel> Perfomance { get; set; } Property Value IEnumerable<PerfomanceViewModel> SelectedDisciplineId Выбранный идентификатор дисциплины public int? SelectedDisciplineId { get; set; } Property Value int? SelectedGroupId Идентификатор выбранной группы public int? SelectedGroupId { get; set; } Property Value int?"
  },
  "api/AcademicPerformance.Models.ViewModels.GradeViewModel.html": {
    "href": "api/AcademicPerformance.Models.ViewModels.GradeViewModel.html",
    "title": "Class GradeViewModel | AcadmicPerfomance",
    "keywords": "Class GradeViewModel Namespace AcademicPerformance.Models.ViewModels Assembly AcademicPerformance.dll Модель представления для оценок public class GradeViewModel Inheritance object GradeViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date Дата public DateTime Date { get; set; } Property Value DateTime DayOfWeek День недели public DayOfWeek DayOfWeek { get; set; } Property Value DayOfWeek Value Значение public string Value { get; set; } Property Value string"
  },
  "api/AcademicPerformance.Models.ViewModels.PerfomanceViewModel.html": {
    "href": "api/AcademicPerformance.Models.ViewModels.PerfomanceViewModel.html",
    "title": "Class PerfomanceViewModel | AcadmicPerfomance",
    "keywords": "Class PerfomanceViewModel Namespace AcademicPerformance.Models.ViewModels Assembly AcademicPerformance.dll Модель представления студента с его оценками public class PerfomanceViewModel Inheritance object PerfomanceViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Grades Коллекция оценок public IEnumerable<GradeViewModel> Grades { get; set; } Property Value IEnumerable<GradeViewModel> Number Номер студента public int Number { get; set; } Property Value int StudentFullname Полное имя студента public string StudentFullname { get; set; } Property Value string StudentId Идентифиактор студента public int StudentId { get; set; } Property Value int"
  },
  "api/AcademicPerformance.Models.ViewModels.html": {
    "href": "api/AcademicPerformance.Models.ViewModels.html",
    "title": "Namespace AcademicPerformance.Models.ViewModels | AcadmicPerfomance",
    "keywords": "Namespace AcademicPerformance.Models.ViewModels Classes FilterPerfomanceViewModel Модель представления, содержащая информацию о фильтрах по дисциплине и группе, а также содержащая ведомость по группе GradeViewModel Модель представления для оценок PerfomanceViewModel Модель представления студента с его оценками"
  },
  "wwwroot/lib/jquery-validation/LICENSE.html": {
    "href": "wwwroot/lib/jquery-validation/LICENSE.html",
    "title": "The MIT License (MIT) | AcadmicPerfomance",
    "keywords": "The MIT License (MIT) Copyright Jörn Zaefferer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}